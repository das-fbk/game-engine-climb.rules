package eu.trentorise.game.model

import eu.trentorise.game.notification.MessageNotification;
import eu.trentorise.game.model.PointConcept;
import eu.trentorise.game.model.PointConcept.PeriodInstance;

import java.lang.Math;

global Double const_record_percent;

function Double findPeriodicMax(PointConcept pc, String pName) {
	Double ret = 0.0;
	PeriodInstance pi = pc.getPeriodCurrentInstance(pName);
	int i = pi.getIndex();
	while (i >= 0) {
		pi = pc.getPeriodInstance(pName, i--);
		Double s = pi.getScore();
		if(s > ret)
			ret = pi.getScore();
	}
	
	return ret;
}

rule "R-weekly-record-distance"
when
	Action(id == "WeeklyTaskTest") // simulates triggering of weekly task
	$id : InputData( $c : data["counter"] )
	$pc : PointConcept(name == (String)$c)
	Player($teamId : id, team == true) // only works with teams
	Game( $gameId: id)
	$bd : PointConcept(name == "bonus_distance")
	$td : PointConcept(name == "total_distance")
then
	log("apply \'R-check-record-distance\'");
	Double current = $pc.getPeriodCurrentScore("weekly");
	Double max = findPeriodicMax($pc,"weekly");
	if (current.equals(max)) {
		MessageNotification mn = new MessageNotification($gameId,$teamId, 'Nuovo record settimanale: ');
		mn.addData("score", $c);
		mn.addData("record", current);
		insert(mn);
		// assign bonus
		Double bonus = Math.ceil(current * const_record_percent);
		$bd.setScore($bd.getScore() + bonus);
		$td.setScore($td.getScore() + bonus);
		update($bd);
		update($td);
		$id.getData().put("bonus", bonus);
		insert(new UpdateTeams());
	}
end

rule "R-weekly-record-propagation"
when
	Member( $c : inputData["counter"], $bonus : inputData["bonus"] != null)
	$pc : PointConcept(name == (String)$c)
	Player($teamId : id, team == true) // only works with teams
	$bd : PointConcept(name == "bonus_distance")
	$td : PointConcept(name == "total_distance")
then
	log("apply \'R-weekly-record-propagation\'");
	$bd.setScore($bd.getScore() + $bonus);
	$td.setScore($td.getScore() + $bonus);
	update($bd);
	update($td);
	insert(new UpdateTeams());
end

