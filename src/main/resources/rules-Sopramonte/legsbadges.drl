package  eu.trentorise.game.model

import java.util.ArrayList;

import eu.trentorise.game.notification.BadgeNotification;
import eu.trentorise.game.notification.MessageNotification;

import eu.trentorise.game.core.Utility;

global Utility utils;

global String const_school_name;
global Double const_leg_bonus;
global Double const_almost_reached_next_leg;
// TRIP LEGS
global Double Roma_distance;
global Double Napoli_distance;
global Double LaMaddalena_distance;

//add leg badge rules
//only for SCHOOL

rule "R-add-badge Roma"
	salience -1000
when 
    PointConcept(name == 'total_distance', score >= Roma_distance)
    $bc : BadgeCollectionConcept(name == 'LegsToMinsk', badgeEarned not contains 'Roma') 
    Game( $gameId: id)
    Player( $teamId : id, $teamId == const_school_name, team == true )
then
    utils.log("apply \'R-add-badge Roma\'");
    $bc.getBadgeEarned().add('Roma');
    insert(new BadgeNotification($gameId,$teamId, $bc.getName(), 'Roma'));
    update( $bc );
end

rule "R-add-badge Napoli"
	salience -1000
when 
    PointConcept(name == 'total_distance', score >= Napoli_distance)
    $bc : BadgeCollectionConcept(name == 'LegsToMinsk', badgeEarned not contains 'Napoli') 
    Game( $gameId: id)
    Player( $teamId : id, $teamId == const_school_name, team == true )
then
    utils.log("apply \'R-add-badge Napoli\'");
    $bc.getBadgeEarned().add('Napoli');
    insert(new BadgeNotification($gameId,$teamId, $bc.getName(), 'Napoli'));
    update( $bc );
end

rule "R-add-badge La Maddalena"
	salience -1000
when 
    PointConcept(name == 'total_distance', score >= LaMaddalena_distance)
    $bc : BadgeCollectionConcept(name == 'LegsToMinsk', badgeEarned not contains 'La Maddalena') 
    Game( $gameId: id)
    Player( $teamId : id, $teamId == const_school_name, team == true )
then
    utils.log("apply \'R-add-badge La Maddalena\'");
    $bc.getBadgeEarned().add('La Maddalena');
    insert(new BadgeNotification($gameId,$teamId, $bc.getName(), 'La Maddalena'));
    update( $bc );
end



rule "R-GAME-END"
//special END-OF-GAME MessageNotification for SCHOOL
// minimal salience to guarantee the MessageNotification is the last seen
salience -10000
when
	BadgeCollectionConcept(name == 'LegsToMinsk', badgeEarned contains 'La Maddalena')
	Game( $gameId: id)
    Player( $teamId : id, $teamId == const_school_name, team == true )
    $cd : CustomData()
    $tot_dist : PointConcept(name == 'total_distance')
then
	utils.log("apply \'R-GAME-END\'");
	$cd.put("game_finished", new Boolean(true));
	MessageNotification message = new MessageNotification($gameId,$teamId, 'GameFinished');
    message.addData("_totalKm_", $tot_dist.getScore());
    insert(message);
	
end


// almost reached leg rules
//inserts a Custom Data with the name of the leg to avoid duplicate notifications
// only for SCHOOL
rule "R-notify-almost Roma"
	salience -2000
when 
	$bc : BadgeCollectionConcept(name == 'LegsToMinsk', badgeEarned not contains 'Roma') 
    PointConcept(name == 'total_distance', 
    	score > Roma_distance - const_almost_reached_next_leg && const_almost_reached_next_leg < Roma_distance)
    $cd: CustomData($almost : this["almost_reached_legs"] == null || !((ArrayList)$almost).contains("Roma")) 
    Game( $gameId: id)
    Player( $teamId : id, $teamId == const_school_name, team == true )
then
    utils.log("apply \'R-notify-almost Roma\'");
    ArrayList hs = (ArrayList)$almost;
    if (hs==null) { 
    	hs = new ArrayList();
    	$cd.put("almost_reached_legs", hs);
    }
    hs.add("Roma");
	
    MessageNotification message = new MessageNotification($gameId,$teamId, 'AlmostReachedLeg');
    message.addData("_leg_", "Roma");
    insert(message);
end



//assigns a bonus to the SCHOOL for each reached leg
/*rule "R-badge-bonus"
salience -10000
when
	BadgeNotification( collectionName == 'LegsToMinsk', playerId == const_school_name )
	$tot_dist : PointConcept(name == "total_distance")
	$bonus_dist : PointConcept(name == "bonus_distance")
then
	if (const_leg_bonus.intValue() != 0) {
		utils.log("apply \'R-badge-bonus\'");
		$bonus_dist.setScore($bonus_dist.getScore() + const_leg_bonus);
		$tot_dist.setScore($tot_dist.getScore() + const_leg_bonus);
		update($bonus_dist);
		update($tot_dist);
	}
end*/
